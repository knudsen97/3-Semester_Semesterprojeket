#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <thread>
#include <vector>
#define M_PI 3.14

float goertzel_mag(int numSamples, int TARGET_FREQ, unsigned int SAMPLING_RATE, const sf::Int16* data) {
	int k, i;
	float floatnumSamples;
	float omega, sine, cosine, coeff, q0, q1, q2, magnitude, real, imag;

	float scalingFactor = numSamples / 2.0;

	floatnumSamples = (float)numSamples;
	k = (int)(0.5 + ((floatnumSamples * TARGET_FREQ) / SAMPLING_RATE));
	omega = (2.0 * M_PI * k) / floatnumSamples;
	sine = sin(omega);
	cosine = cos(omega);
	coeff = 2.0 * cosine;
	q0 = 0;
	q1 = 0;
	q2 = 0;

	for (i = 0; i < numSamples; i++) {
		q0 = coeff * q1 - q2 + data[i];
		q2 = q1;
		q1 = q0;
	}
	real = (q1 - q2 * cosine) / scalingFactor;
	imag = (q2 * sine) / scalingFactor;

	magnitude = sqrtf(pow(real, 2) + pow(imag, 2));
	
	return magnitude;
}

int record()
{	
	if (!sf::SoundBufferRecorder::isAvailable())
	{
		std::cerr << "FEJL" << std::endl;
	}
	sf::SoundBufferRecorder recorder;

	sf::RenderWindow window(sf::VideoMode(640, 400), "Chat");
	while (window.isOpen())
	{
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed) {
				window.close();
				break;
			}
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::R)) {
				std::cout << "recording started" << std::endl;
				recorder.start();
			}
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
				std::cout << "recording ended" << std::endl;
				recorder.stop();
				const sf::SoundBuffer& buffer = recorder.getBuffer();
				buffer.saveToFile("lyd.ogg");
			}	
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
				std::cout << "Analyzing" << std::endl;
				const sf::SoundBuffer& buffer = recorder.getBuffer();
				
				unsigned int SAMPLE_RATE = recorder.getSampleRate();
				const sf::Int16* samples = buffer.getSamples();
				std::size_t count = buffer.getSampleCount();

				std::cout << goertzel_mag(count, 400, SAMPLE_RATE, samples) << std::endl;
			}
			if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
				window.close();
			}
		}
	}
	return 0;
}


int main() {

	std::thread t1(record);

	t1.join();

	return 0;
}
